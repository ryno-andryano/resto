{"version":3,"file":"app~a51fa3f5.bundle.js","mappings":";8GA+BA,QA/Bc,CACZ,6CACA,+CACA,iDACA,kCACA,mEACA,yCACA,gEACA,iCACA,+BACA,2DACA,+DACA,8DACA,yCACA,mCACA,+CACA,4CACA,sDACA,kDACA,wCACA,uBACA,4CACA,2CACA,qDACA,oDACA,8DACA,sCACA,uEACA,oWC3BF,4gGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IAAOC,EAAsDC,EAAAA,EAAAA,cAAvCC,EAAuCD,EAAAA,EAAAA,iBAArBE,EAAqBF,EAAAA,EAAAA,kBAEvDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QADwD,SAChDC,GACNA,EAASC,kBAAkBL,EAAmB,CAACM,QAAS,MACzD,IA0BH,QAvB8B,CACtBC,cADsB,SACRC,GAAI,oGACjBA,EADiB,iEAKRP,EALQ,uCAKGQ,IAAIT,EAAmBQ,IAL1B,4CAMvB,EACKE,kBARsB,WAQF,iHACVT,EADU,uCACCU,OAAOX,IADR,4CAEzB,EACKY,cAXsB,SAWRC,GAAY,oGACzBA,EAAWC,eAAe,MADD,iEAKhBb,EALgB,uCAKLc,IAAIf,EAAmBa,IALlB,4CAM/B,EACKG,iBAlBsB,SAkBLR,GAAI,iHACXP,EADW,8CACOD,EAAmBQ,IAD1B,4CAE1B,kDCvBH,QANqB,CACnBS,QAAS,GAAF,OAAKnB,EAAAA,EAAAA,SAAL,QACPoB,OAAQ,SAACV,GAAD,gBAAWV,EAAAA,EAAAA,SAAX,kBAAoCU,EAApC,EACRW,OAAQ,GAAF,OAAKrB,EAAAA,EAAAA,SAAL,8PCJR,0vNA4BA,QA3BMsB,kNACJ,wGACyBC,MAAMC,EAAAA,SAD/B,cACQC,EADR,gBAE8BA,EAASC,OAFvC,uBAESC,EAFT,EAESA,YAFT,kBAGSA,GAHT,qIAMA,WAA8BjB,GAA9B,2FAEyBa,MAAMC,EAAAA,OAAoBd,IAFnD,cAEQe,EAFR,gBAG6BA,EAASC,OAHtC,uBAGSX,EAHT,EAGSA,WAHT,kBAISA,GAJT,+HAOA,WAAuBa,GAAvB,yFAC4BL,MAAMC,EAAAA,OAAqB,CACnDK,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUL,KANzB,cACQM,EADR,gBAQyBA,EAAYR,OARrC,OAQQD,EARR,OASEU,QAAQC,IAAIX,EAASY,SATvB,6KAdIf,oCCON,QATe,CACbgB,SAAU,uCACVC,eAAgB,8CAChBC,WAAY,WACZzC,cAAe,iBACfE,iBAAkB,EAClBC,kBAAmB,qGCGfuC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQC,SAASC,cAAc,wBAC/BC,SAAUF,SAASC,cAAc,cACjCE,UAAWH,SAASC,cAAc,eAClCG,IAAKJ,SAASC,cAAc,gBAC5BI,QAASL,SAASC,cAAc,WAGlCK,OAAOC,iBAAiB,cAAc,WACpCV,EAAIW,YACL,IAEDF,OAAOC,iBAAiB,QAAQ,WAC9BV,EAAIW,cACJC,EAAAA,EAAAA,IACD","sources":["webpack://resto/./src/scripts/data/facts.js","webpack://resto/./src/scripts/data/favorite.js","webpack://resto/./src/scripts/global/api-endpoint.js","webpack://resto/./src/scripts/data/source.js","webpack://resto/./src/scripts/global/config.js","webpack://resto/./src/scripts/index.js"],"sourcesContent":["const facts = [\r\n  'Broccoli contains more protein than steak.',\r\n  'Raspberries are a member of the rose family.',\r\n  'Potatoes were the first food planted in space.',\r\n  'Cucumbers are 95 percent water.',\r\n  'Pineapple plants can take two to three years to produce a fruit.',\r\n  'Cotton candy was created by a dentist.',\r\n  'Watermelon and bananas are berries, but strawberries are not!',\r\n  'Cashews grow on cashew apples.',\r\n  'Lemons float but limes sink.',\r\n  'The original carrots were purple and yellow, not orange.',\r\n  'The most expensive pizza in the world costs $12,000 dollars.',\r\n  'One fast-food burger can have meat from 100 different cows.',\r\n  'Ketchup used to be used as a medicine.',\r\n  'White chocolate isn’t chocolate.',\r\n  'Cheese is the most stolen food in the world.',\r\n  'One in four hazelnuts ends up in Nutella.',\r\n  'McDonald’s sells 2.5 billion hamburgers every year.',\r\n  'French fries originated in Belgium, not France.',\r\n  'Cauliflower comes in multiple colors.',\r\n  'Bad eggs will float.',\r\n  'Food tastes different when you’re flying.',\r\n  'Turkey consumes the most tea per person.',\r\n  'The Netherlands drinks the most coffee per person.',\r\n  'Nutritious food is more expensive than junk food.',\r\n  'Eskimos use refrigerators to stop their food from freezing.',\r\n  'Goat meat is the most popular meat.',\r\n  'There are more Indian restaurants in London than in Mumbai or Delhi.',\r\n  'Breakfast is not the most important meal of the day.',\r\n];\r\n\r\nexport default facts;\r\n","import {openDB} from 'idb';\r\nimport CONFIG from '../global/config';\r\n\r\nconst {DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME} = CONFIG;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, {keyPath: 'id'});\r\n  },\r\n});\r\n\r\nconst FavoriteRestaurantIdb = {\r\n  async getRestaurant(id) {\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\r\n  },\r\n  async getAllRestaurants() {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\r\n  },\r\n  async putRestaurant(restaurant) {\r\n    if (!restaurant.hasOwnProperty('id')) {\r\n      return;\r\n    }\r\n\r\n    return (await dbPromise).put(OBJECT_STORE_NAME, restaurant);\r\n  },\r\n  async deleteRestaurant(id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\r\n  },\r\n};\r\n\r\nexport default FavoriteRestaurantIdb;\r\n","import CONFIG from './config';\r\n\r\nconst API_ENDPOINT = {\r\n  EXPLORE: `${CONFIG.BASE_URL}list`,\r\n  DETAIL: (id) => `${CONFIG.BASE_URL}detail/${id}`,\r\n  REVIEW: `${CONFIG.BASE_URL}review`,\r\n};\r\n\r\nexport default API_ENDPOINT;\r\n","import API_ENDPOINT from '../global/api-endpoint';\r\n\r\nclass DicodingRestaurantSource {\r\n  static async exploreRestaurants() {\r\n    const response = await fetch(API_ENDPOINT.EXPLORE);\r\n    const {restaurants} = await response.json();\r\n    return restaurants;\r\n  }\r\n\r\n  static async detailRestaurant(id) {\r\n    // eslint-disable-next-line new-cap\r\n    const response = await fetch(API_ENDPOINT.DETAIL(id));\r\n    const {restaurant} = await response.json();\r\n    return restaurant;\r\n  }\r\n\r\n  static async addReview(formValue) {\r\n    const rawResponse = await fetch(API_ENDPOINT.REVIEW, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formValue),\r\n    });\r\n    const response = await rawResponse.json();\r\n    console.log(response.message);\r\n  }\r\n}\r\n\r\nexport default DicodingRestaurantSource;\r\n","const CONFIG = {\r\n  BASE_URL: 'https://restaurant-api.dicoding.dev/',\r\n  BASE_IMAGE_URL: 'https://restaurant-api.dicoding.dev/images/',\r\n  CACHE_NAME: 'RESTO-V1',\r\n  DATABASE_NAME: 'resto-database',\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: 'restaurant',\r\n};\r\n\r\nexport default CONFIG;\r\n","import 'regenerator-runtime';\r\nimport 'material-icons/iconfont/filled.css';\r\nimport '../styles/main.scss';\r\nimport 'lazysizes';\r\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\r\nimport './view/component-index';\r\nimport App from './view/app';\r\nimport swRegister from './utils/sw-register';\r\n\r\nconst app = new App({\r\n  button: document.querySelector('.header__menu-button'),\r\n  menuIcon: document.querySelector('#menu-icon'),\r\n  closeIcon: document.querySelector('#close-icon'),\r\n  nav: document.querySelector('.header__nav'),\r\n  content: document.querySelector('#root'),\r\n});\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  app.renderPage();\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n  app.renderPage();\r\n  swRegister();\r\n});\r\n"],"names":["i","DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getRestaurant","id","get","getAllRestaurants","getAll","putRestaurant","restaurant","hasOwnProperty","put","deleteRestaurant","EXPLORE","DETAIL","REVIEW","DicodingRestaurantSource","fetch","API_ENDPOINT","response","json","restaurants","formValue","method","headers","body","JSON","stringify","rawResponse","console","log","message","BASE_URL","BASE_IMAGE_URL","CACHE_NAME","app","App","button","document","querySelector","menuIcon","closeIcon","nav","content","window","addEventListener","renderPage","swRegister"],"sourceRoot":""}